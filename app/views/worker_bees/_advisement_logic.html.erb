
<button id="simulate-week">Simulate Week</button>
<div id="worker-bee-id" style="display: none"><%= worker_bee.id%></div>        
<div id="worker-bee-comb-id" style="display: none"><%= worker_bee.comb_id%></div> 
<div id="worker-bee" style="display: none"><%= worker_bee%></div> 
<div id="comb" style="display: none"><%= comb%></div> 
<div id="math" style="display: none"><%= relevant_math%></div> 




<script type='text/javascript'>
    document.addEventListener('DOMContentLoaded', function () {
        let simulateWeekButton = document.getElementById('simulate-week')
        let bee_id = document.getElementById('worker-bee-id').innerHTML
        let comb_id = document.getElementById('worker-bee-comb-id').innerHTML
        let relevantMath = JSON.parse(document.getElementById('math').innerHTML)
        let current_comb = document.getElementById('worker-bee').innerHTML
        let current_bee = document.getElementById('comb').innerHTML

        let current_bee_nectar
        let advisement
        let advisement_accepted
        // if the bee exits than the curre_bee_nectar will be assinged to accordingly, otherwise it will be a random number
        if (current_bee) {
            current_bee_nectar = current_bee.nectar
        } else {
            current_bee_nectar = relevantMath[0]
        }

        let nectar_consumption = 0
        const on_vacay = relevantMath[1]
        
        // on_vacay determines if the bee took a vacation or not
        if (!on_vacay) {
            nectar_consumption = relevantMath[2]
        }
        

        // range_variance determines a rang in which the bee will gather pollen
        let range_variance = 0
        let pollen_gathered
        if (nectar_consumption > current_bee_nectar){
            // if a bee has too much nectar (drunk) it will could potentially do better but
            // most likely will do poorly
            range_variance = relevantMath[3]
        } else {
            // if the nectar is less than or equal to the current_bee_nectar 
            // than the bee will have a standard range of obtaining pollen
            range_variance = relevantMath[4]
        }

        // since pollen and nectar have a correlation, used a percentage
        // to calculate the amount of nectar gathered each time
        // including the variance
            pollen_gathered = Math.abs(((current_bee_nectar/20000.00) + range_variance)*17.9).round(1)
        // to make sure pollen is always gathered between 5 and 17.9 I made 
        // an if statement to catch outliers
        if (pollen_gathered > 17.9) {
            pollen_gathered = 17.9
        }
        else if (pollen_gathered < 5){
            pollen_gathered = 5
        }

        let all_pollen
        let all_pollen_length
        let all_nectar
        let all_nectar_length
        // every three weeks there is an advisement
        if (i % 3 == 0) {
            // this grabs all pollen data
            all_pollen = PollenCollection
                                    .where(bee_id: bee_id, comb_id: comb_id)
                                    .map(a => a.pollen_glob_collected)
            all_pollen_length = all_pollen.length 
            
            all_nectar = PollenCollection
                                        .where(bee_id: bee_id, comb_id: comb_id)
                                        .map(a => a.nectar_consumption)
            all_nectar_length = all_nectar.length 
                
            // if the last three weeks exists than continue;
            if (all_pollen_length >= 3 && all_nectar_length >= 3) {
                // grabs the last three weeks worth of data
                pollen_average = Math.sum(all_pollen.slice(all_pollen_length-3,all_pollen_length)) / 3.0
                // finds the average pollen for the last three weeks

                // finds the last three weeks for nectar
                nectar_average = Math.sum(all_nectar
                    .slice(all_nectar.length-3, all_nectar.length)) / 3
                // finds average nectar consumed the last three weeks
                    

                // if the productivity is low than accept advisement
                if (pollen_average < current_comb.sweet_spot && nectar_average < current_bee_nectar) {
                    // grabs the last advisment number and times it by the suggested increase
                    advisement = ((1-(pollen_average/current_comb.sweet_spot)) * PollenCollection
                                        .where(bee_id: bee_id, comb_id: comb_id)
                                        .map(a => a.advisement)
                                        .last).floor
                    advisement_accepted = "Yes"
                } else {
                    advisement_accepted = "No"
                    advisement = PollenCollection
                                    .where(bee_id: bee_id, comb_id: comb_id)
                                    .map(a => a.advisement)[advisement.length-1]) 
                }
            }
        } else {
            advisement_accepted = "n/a"
        }

        if (!advisement && !!current_bee) {
            advisement = current_bee.nectar
        }

        simulateWeekButton.addEventListener("click", () => {
            $.ajax({
                url: '/pollen_collections',
                method: "POST",
                data: {
                        pollen_collection:{
                        bee_id: bee_id,
                        comb_id: comb_id,
                        nectar_consumption: nectar_consumption,
                        pollen_glob_collected: pollen_gathered,
                        advisement: advisement,
                        advisement_accepted: advisement_accepted
                    }
                }
            }).then(window.location.href = `http://localhost:3000/worker_bees/${bee_id}`)
        })
    });
</script>
